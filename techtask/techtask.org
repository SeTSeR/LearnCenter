#+LATEX_HEADER:\usepackage[top=0.8in, bottom=0.75in, left=0.625in, right=0.625in]{geometry}
#+LATEX_HEADER:\usepackage[english,russian]{babel}
#+LANGUAGE: ru
#+TITLE: Учебный центр
* Концептуальная модель UI
** Сценарии использования
*** Получение списков обучающихся по курсам
Чтобы получить список обучающихся на курсе, нужно авторизоваться как преподаватель и зайти
на страницу курса, который этот преподаватель ведёт. На этой странице будет список ссылок на
страницы обучающихся, записанных на курс.
*** Получение истории обучения конкретного человека
Чтобы получить историю обучения пользователя, нужно зайти на его страницу. Если обучающийся
разрешил отображение своей истории обучения, она будет представлена на этой странице.
*** Получение списка всех преподавателей
Чтобы получить список всех преподавателей, нужно авторизоваться в качестве администратора курса,
зайти на страницу одного из администрируемых курсов, и перейти по ссылке составления расписания.
На этой странице будет ссылка на страницу со списком всех преподавателей.
*** Получение списка преподавателей, ведущих данный курс
Список преподавателей, ведущих курс, приведён на странице курса, на которую можно попасть
с главной страницы, либо через форму поиска.
*** Получение расписания преподавателя на заданный интервал времени
Получить расписание преподавателя можно зайдя на его страницу и нажав соответствующую кнопку.
*** Получение расписания учащегося на заданный интервал времени
Получить расписание учащегося можно зайдя на его страницу и нажав соответствующую кнопку.
*** Составление расписания занятий для курса
Для составления расписания занятий для курса нужно авторизоваться как администратор курса,
и выбрать курс из администрируемых или создать новый. На странице курса, на которую
пользователь попадает после этого, есть ссылка на страницу редактирования расписания, с
помощью которой и составляется расписание. После составления расписания, внесённые изменения
необходимо сохранить.
*** Управление данными обучающихся
Авторизовавшись, обучающийся может редактировать данные о себе, хранимые в системе. Для
этого на его странице есть кнопка редактирования страницы, добавляющая к полям ФИО, почты,
биографии и контактов формы для установки новых значений соответствующих полей, и кнопку
применения изменений, фиксирующую изменения в базе. Кроме того, рядом с каждой формой при
редактировании данных отображается чекбокс, определяющий, нужно ли показывать данную
информацию на странице пользователя.
*** Управление данными преподавателей
Авторизовавшись, преподаватель может редактировать данные о себе, хранящиеся в системе. Для
этого на его странице есть кнопка редактирования страницы, добавляющая к полям ФИО, почты,
названия компании, биографии и контактов формы для установки новых значений соответствующих
полей, и кнопку применения изменений, фиксирующую изменения в базе. Кроме того, рядом с каждой формой при
редактировании данных отображается чекбокс, определяющий, нужно ли показывать данную
информацию на странице пользователя.
*** Управление курсами
Авторизовавшись как администратор курса, пользователь может создавать новые курсы по ссылке
со страницы администратора курса, либо же перейти по ссылкам с этой же страницы к любому из
администрируемых курсов. На странице курса есть ссылка редактирования расписания курса. На
странице курса, помимо этого, есть кнопка редактирования описания курса, форма добавления
новых администраторов со списком уже добавленных, и чекбокс, определяющий, доступен ли курс
пользователям, отличным от администраторов.
** Страницы приложения
*** Общие положения
В шапке каждой страницы приведены ссылки на главную страницу и страницу авторизации/выхода.
При переходе по ссылке на страницу выхода пользователь попадает на ту же страницу, если она
доступна неавторизованному пользователю, либо на главную.
*** Главная страница
На главной странице приведён список курсов в виде ссылок на них и поле
поиска курса. В результате поиска на главной будут отображаться только курсы, удовлетворяющие
условию поиска. Кроме того, на главной странице в шапке приведена ссылка на личную страницу
пользователя и кнопка выхода, если пользователь авторизован, и ссылки на страницы авторизации
и регистрации в противном случае. Большая часть функциональности приложения доступна только
после авторизации.
*** Список преподавателей
На этой странице приведены ссылки на страницы всех преподавателей, зарегистрированных в системе.
Кроме того, на этой странице есть кнопка поиска преподавателя, которая позволяет отфильтровывать
список.
*** Страница обучающегося
На странице обучающаяся приведено ФИО обучающегося, общая информация о нём, его контактные данные,
если обучающийся разрешил их отображение, и набор курсов, которые обучающийся проходил или
проходит, также если обучающийся разрешил отображение этих данных. Также на странице обучающегося
есть кнопка составления расписания, которая позволяет вывести расписание обучающегося на заданный
интервал. Если обучающийся авторизован, он может менять данные своей страницы и управлять их
доступностью, как сказано ранее. При нажатии на кнопку редактирования страницы возле полей ФИО,
общей информации и контактных данных появляются формы ввода новых значений и чекбокс,
определяющий, нужно ли отображать эти данные на странице. Изменения применяются после нажатия
кнопки сохранения изменений.
*** Страница преподавателя
На странице преподавателя отображается ФИО преподавателя, его контактная информация, если
включено отображение этой информации, название компании, в которой он работает,
и ссылки на курсы, занятия в которых он ведёт. Также на странице преподавателя есть кнопка
составления расписания, которая позволяет вывести расписание преподавателя на заданный интервал.
Если пользователь авторизован как преподаватель, он может управлять отображением контактной
информации на своей странице и редактировать данные на этой странице. При нажатии на кнопку редактирования страницы возле полей ФИО,
общей информации и контактных данных появляются формы ввода новых значений и чекбокс,
определяющий, нужно ли отображать эти данные на странице. Изменения применяются после нажатия
кнопки сохранения изменений.
*** Страница администратора курса
На этой странице предоставлен список ссылок на администрируемые пользователем курсы. Кроме
того, есть ссылка создания курса, с помощью которой создаётся новый курс, на страницу которого
администратор и попадает. По умолчанию созданный курс не виден никому, кроме администратора.
*** Страница курса
На странице курса приведено описание курса, диапазон дат его проведения, его интенсивность,
расписание и список ссылок на страницы преподавателей, ведущих курс.
Расписание представлено в виде списка дат и времени проведения занятий. В случае, если пользователь авторизован как
обучающийся, на странице есть также кнопка записи на курс, либо, если он уже записан, кнопка отмены записи.
Преподавателю, ведущему курс, доступен список ссылок на страницы обучающихся,
записанных на этот курс.
Если пользователь авторизован как администратор курса, он может редактировать расписание курса,
перейдя по соответствующей ссылке. Также есть кнопка редактирования описания курса, при нажатии
этой кнопки появляется форма для нового описания и кнопка сохранения изменений. Помимо этого, администратор курса
может назначать и отзывать других администраторов курса(для этого есть форма, куда пишется почта
добавляемого администратора), и показывать/скрывать курс от других пользователей(чекбокс).
*** Страница редактирования расписания курса
На этой странице представлен набор занятий, проводимых во время курса. Можно изменять время
проведения курса, добавлять или удалять преподавателей, ведущих занятие, добавлять или удалять
занятия. Добавить преподавателя можно либо выбрав его из списка преподавателей, либо
посредством поиска. Внизу страницы есть кнопка фиксации изменений.
*** Страница регистрации
На странице регистрации можно зарегистрировать учётную запись для обучающегося или преподавателя.
Учётная запись администратора курса создаётся вручную из соображений безопасности.
Для регистрации обучающегося нужно предоставить электронную почту, логин и пароль, которые
будут использоваться для входа, ФИО обучающегося и опциональную биографическую информацию,
преподавателю дополнительно нужно предоставить название компании, в которой он работает.
*** Страница авторизации
На странице авторизации можно войти как обучающийся, преподаватель, либо администратор курса.
Во всех трёх случаях авторизация происходит с помощью логина и пароля. После авторизации как
обучающийся, преподаватель или администратор курса пользователь попадает на страницу
обучающегося, преподавателя или администратора курса соответственно.
** Схема навигации между страницами
   #+begin_src plantuml :file pages.png
   [*] -> Главная
   Главная: список курсов
   Главная: поиск курсов
   Главная --> СтраницаРезультатовПоиска
   Главная --> Регистрация
   Главная --> Авторизация
   Главная --> Выход
   СтраницаРезультатовПоиска: список подходящих курсов
   Регистрация --> СтраницаУчащегося : Регистрация учащегося
   Авторизация --> СтраницаУчащегося : Авторизация учащегося
   Регистрация --> СтраницаПреподавателя : Регистрация преподавателя
   Авторизация --> СтраницаПреподавателя : Авторизация преподавателя
   Авторизация --> СтраницаАдминистратора : Авторизация администратора
   СтраницаУчащегося: отображение и редактирование данных
   СтраницаУчащегося: управление видимостью данных
   СтраницаУчащегося: получение расписания
   СтраницаУчащегося: история обучения
   СтраницаПреподавателя: отображение и редактирование данных
   СтраницаПреподавателя: управление видимостью данных
   СтраницаПреподавателя: получение расписания
   СтраницаПреподавателя: проводимые курсы
   СтраницаАдминистратора: администрируемые курсы
   СтраницаАдминистратора: создание курса
   СтраницаУчащегося --> СтраницаКурса
   СтраницаПреподавателя --> СтраницаКурса
   СтраницаАдминистратора --> СтраницаКурса
   СтраницаРезультатовПоиска --> СтраницаКурса
   СтраницаУчащегося --> Выход
   СтраницаПреподавателя --> Выход
   СтраницаАдминистратора --> Выход
   СтраницаКурса --> Выход
   СтраницаКурса: описание курса
   СтраницаКурса: расписание курса
   СтраницаКурса: запись на курс
   СтраницаКурса -> СтраницаСоставленияРасписания : Только для администратора
   СтраницаСоставленияРасписания -> СтраницаКурса
   СтраницаСоставленияРасписания -> СписокПреподавателей
   СтраницаСоставленияРасписания: назначение дат занятий
   СтраницаСоставленияРасписания: назначение преподавателей
   Выход -> Главная
   Главная -> [*]
   #+end_src

   #+RESULTS:

* База данных
** Схема базы данных
  #+begin_src plantuml :file db.png
  entity "Преподаватель" as п {
    *Идентификатор: число <<генерируемый первичный ключ>>
    --
    *Имя: текст
    *Фамилия: текст
    Отчество: текст
    *Почта: текст
    *Солёный хэш пароля: текст
    *Компания: текст
    О себе: текст
    *Разрешение отображения ФИО: флаг
    *Разрешение отображения почты: флаг
  }
  entity "Обучающийся" as о {
    *Идентификатор: число <<генерируемый первичный ключ>>
    --
    *Имя: текст
    *Фамилия: текст
    Отчество: текст
    *Почта: текст
    *Солёный хэш пароля: текст
    О себе: текст
    *Разрешение отображения ФИО: флаг
    *Разрешение отображения почты: флаг
  }
  entity "Администратор" as а {
    *Идентификатор: число <<генерируемый первичный ключ>>
    --
    *Почта: текст
    *Солёный хэш пароля: текст
  }
  entity "Курс" as к {
    *Идентификатор: число <<генерируемый первичный ключ>>
    --
    Описание: текст
  }
  entity "Занятие" as з {
    *Идентификатор: число <<генерируемый первичный ключ>>
    --
    Описание: текст
    *Дата занятия: дата
    *Время занятия: время
  }
  п ||--o{ з
  о }o--o{ к
  а }|--o{ к
  к ||--o{ з
  #+end_src

  #+RESULTS:
  [[file:db.png]]

** Скрипт создания базы данных
   #+begin_src sql :engine postgresql :dbuser smakarov :database learn_center :exports code :tangle create_db.sql
CREATE TABLE PUPIL (
  id serial PRIMARY KEY,
  firstname varchar(100) NOT NULL,
  lastname varchar(100) NOT NULL,
  patronymic varchar(100),
  mail varchar(254) NOT NULL,
  bio text,
  pass_hash varchar(64) NOT NULL,
  display_name boolean NOT NULL,
  display_mail boolean NOT NULL);

CREATE TABLE TEACHER (
  id serial PRIMARY KEY,
  firstname varchar(100) NOT NULL,
  lastname varchar(100) NOT NULL,
  patronymic varchar(100),
  company_name varchar(256) NOT NULL,
  mail varchar(254) NOT NULL,
  bio text,
  pass_hash varchar(64) NOT NULL,
  display_name boolean NOT NULL,
  display_mail boolean NOT NULL);

CREATE TABLE ADMINISTRATOR (
  id serial PRIMARY KEY,
  mail varchar(254) NOT NULL,
  pass_hash varchar(64) NOT NULL);

CREATE TABLE COURSE (
  id serial PRIMARY KEY,
  admin_id integer REFERENCES ADMINISTRATOR,
  description text,
  is_displayed boolean NOT NULL);

CREATE TABLE LESSON (
  id serial PRIMARY KEY,
  description text,
  lesson_time timestamp NOT NULL,
  course_id integer REFERENCES COURSE,
  teacher_id integer REFERENCES TEACHER);

CREATE TABLE ADMIN_COURSE (
  id serial PRIMARY KEY,
  admin_id integer REFERENCES ADMINISTRATOR,
  course_id integer REFERENCES COURSE);

CREATE TABLE PUPIL_COURSE (
  id serial PRIMARY KEY,
  pupil_id integer REFERENCES PUPIL,
  course_id integer REFERENCES COURSE);

CREATE FUNCTION fix_courses() RETURNS TRIGGER AS $fix_courses$
DECLARE
        c RECORD;
        new_admin RECORD;
    BEGIN
        FOR c IN
            SELECT id, description FROM COURSE
            WHERE COURSE.admin_id = OLD.id
        LOOP
            SELECT admin_id INTO new_admin FROM ADMIN_COURSE
            WHERE ADMIN_COURSE.course_id = course.id
            AND ADMIN_COURSE.admin_id != OLD.id;
            IF NOT FOUND THEN
                RAISE EXCEPTION 'Removing last admin of the course %', c.d;
            END IF;
            UPDATE COURSE SET admin_id = new_admin.admin_id WHERE id = c.id;
        END LOOP;
        RETURN OLD;
    END;
$fix_courses$ LANGUAGE plpgsql;

CREATE TRIGGER fix_courses BEFORE DELETE ON ADMINISTRATOR
    FOR EACH ROW EXECUTE FUNCTION fix_courses();
   #+end_src

   #+RESULTS:
   | CREATE TABLE |
   |--------------|
   | CREATE TABLE |
   | CREATE TABLE |
   | CREATE TABLE |
   | CREATE TABLE |
   | CREATE TABLE |
   | CREATE TABLE |
** Скрипт заполнения базы данных
   #+begin_src sql :engine postgresql :dbuser smakarov :database learn_center_test :exports code :tangle fill_db.sql
SET DATESTYLE TO "DMY";

INSERT INTO PUPIL(firstname, lastname, mail, pass_hash, display_name, display_mail) VALUES('John',
'Doe', 'mail@example.com', 'fc4b5fd6816f75a7c81fc8eaa9499d6a299bd803397166e8c4cf9280b801d62c', TRUE, TRUE);
INSERT INTO PUPIL(firstname, lastname, mail, pass_hash, display_name, display_mail) VALUES('Jane',
'Doe', 'jdoe@bing.com', '8070d7385ec2439ca5d8d415c003cfde188803fc20d7f89291883a8ac4d61c9d', TRUE, FALSE);
INSERT INTO PUPIL(firstname, lastname, mail, pass_hash, display_name, display_mail) VALUES('Jimm',
'Craig', 'craig@gmail.com', '8bc4b88b1827764692b001ccc6696a23204a9fac043135ebad830b2af6fc8924', TRUE, FALSE);
INSERT INTO PUPIL(firstname, lastname, mail, pass_hash, display_name, display_mail) VALUES('Kate',
'Robinson', 'kate1984@bing.com', '25032daca58d5d3e677fe090e5be9ffd2b1a7ef68d585dd05c3dcacf3fce41c5', TRUE, TRUE);

INSERT INTO TEACHER(firstname, lastname, company_name, mail, pass_hash, display_name, display_mail) VALUES('Sergey',
'Kuznetsov', 'CS Center', 'mail@example.com', '6b3a55e0261b0304143f805a24924d0c1c44524821305f31d9277843b8a10f4e', TRUE, TRUE);
INSERT INTO TEACHER(firstname, lastname, company_name, mail, pass_hash, display_name, display_mail) VALUES('Oleg',
'Tarasov', 'CS Center', 'taroleg@gmail.com', '44e9385f53069b91d4afaa12f93a6e3353f83cc8f1db1f03093326416f32b98f', FALSE, FALSE);
INSERT INTO TEACHER(firstname, lastname, company_name, mail, pass_hash, display_name, display_mail) VALUES('Denis',
'Moskvin', 'CS Center', 'chrome@google.com', 'c942bc47f4c98e6bda9666c229c1dced88eec8ee73383d7c75de3dc21a3941f4', FALSE, FALSE);
INSERT INTO TEACHER(firstname, lastname, company_name, mail, pass_hash, display_name, display_mail) VALUES('Yegor',
'Bugayenko', 'CS Center', 'yegor256@gmail.com', '520ac20de525cd5a8c8c39c39b46b71a090ce968ff60f861737551d7bc2266d5', FALSE, TRUE);

INSERT INTO ADMINISTRATOR(mail, pass_hash) VALUES('nicolas@nmattia.com', '84eab5c7b4f0530a708350454e7f8ccaecde87cfbb9b1ed005da18685bf6776f');
INSERT INTO ADMINISTRATOR(mail, pass_hash) VALUES('robert@stuffwithstuff.com', 'c074d9749aa92d447e63edc69932ebf983b863685fe112646e7ae4314641e391');

INSERT INTO COURSE(description, admin_id, is_displayed) VALUES('Java programming', 1, TRUE);
INSERT INTO COURSE(description, admin_id, is_displayed) VALUES('Databases', 2, TRUE);

INSERT INTO LESSON(description, lesson_time, course_id, teacher_id) VALUES('Introduction',
'12-03-2020 16:20:00', 1, 2);
INSERT INTO LESSON(description, lesson_time, course_id, teacher_id) VALUES('Introduction',
'14-03-2020 16:55:00', 2, 3);
INSERT INTO LESSON(description, lesson_time, course_id, teacher_id) VALUES('Object-oriented programming',
'19-03-2020 16:20:00', 1, 4);
INSERT INTO LESSON(description, lesson_time, course_id, teacher_id) VALUES('History of databases',
'12-03-2020 16:55:00', 2, 4);

INSERT INTO ADMIN_COURSE(admin_id, course_id) VALUES(1, 1);
INSERT INTO ADMIN_COURSE(admin_id, course_id) VALUES(2, 2);

INSERT INTO PUPIL_COURSE(pupil_id, course_id) VALUES(1, 1);
INSERT INTO PUPIL_COURSE(pupil_id, course_id) VALUES(2, 2);
INSERT INTO PUPIL_COURSE(pupil_id, course_id) VALUES(3, 2);
INSERT INTO PUPIL_COURSE(pupil_id, course_id) VALUES(4, 1);
   #+end_src

   #+RESULTS:
   | SET        |
   |------------|
   | INSERT 0 1 |
   | INSERT 0 1 |
   | INSERT 0 1 |
   | INSERT 0 1 |
   | INSERT 0 1 |
   | INSERT 0 1 |
   | INSERT 0 1 |
   | INSERT 0 1 |
   | INSERT 0 1 |
   | INSERT 0 1 |
   | INSERT 0 1 |
   | INSERT 0 1 |
   | INSERT 0 1 |
   | INSERT 0 1 |
   | INSERT 0 1 |
   | INSERT 0 1 |
   | INSERT 0 1 |
   | INSERT 0 1 |
   | INSERT 0 1 |
   | INSERT 0 1 |
   | INSERT 0 1 |
   | INSERT 0 1 |

Проверим заполнение таблиц:
#+begin_src sql :engine postgresql :dbuser smakarov :database learn_center :exports both
SELECT * FROM PUPIL;
#+end_src
#+begin_src sql :engine postgresql :dbuser smakarov :database learn_center :exports both
SELECT * FROM TEACHER;
#+end_src
#+begin_src sql :engine postgresql :dbuser smakarov :database learn_center :exports both
SELECT * FROM ADMINISTRATOR;
#+end_src
#+begin_src sql :engine postgresql :dbuser smakarov :database learn_center :exports both
SELECT * FROM COURSE;
#+end_src
#+begin_src sql :engine postgresql :dbuser smakarov :database learn_center :exports both
SELECT * FROM LESSON;
#+end_src
** Скрипт очистки базы данных
   #+begin_src sql :engine postgresql :dbuser smakarov :database learn_center_test :exports code :tangle drop_db.sql
DROP TRIGGER fix_courses ON ADMINISTRATOR;
DROP FUNCTION fix_courses();

DROP TABLE PUPIL_COURSE;
DROP TABLE ADMIN_COURSE;
DROP TABLE PUPIL CASCADE;
DROP TABLE COURSE CASCADE;
DROP TABLE LESSON CASCADE;
DROP TABLE TEACHER CASCADE;
DROP TABLE ADMINISTRATOR CASCADE;
   #+end_src

   #+RESULTS:
   | DROP TABLE |
   |------------|
   | DROP TABLE |
   | DROP TABLE |
   | DROP TABLE |
   | DROP TABLE |
   | DROP TABLE |
   | DROP TABLE |
